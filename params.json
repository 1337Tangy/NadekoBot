{
<<<<<<< HEAD
  "name": "Nadekobot - Dragon's fork!",
  "tagline": "NadekoBot is a Discord chatbot",
  "body": "### [Click here to invite NadekoBot to your server](https://discordapp.com/oauth2/authorize?client_id=170254782546575360&scope=bot&permissions=66186303)\r\n[**click here for a list of commands**](https://github.com/Kwoth/NadekoBot/blob/master/commandlist.md)  \r\nNadeko Discord chatbot written in C# using Discord.net library.  \r\nYou might want to join my discord server where i can provide help etc. https://discord.gg/0ehQwTK2RBjAxzEY\r\n\r\n##This section will guide you through how to setup NadekoBot\r\n#### For easy setup and no programming knowledge, you can use [UPDATER](https://github.com/Kwoth/NadekoUpdater/releases/latest) or download release from [releases](https://github.com/Kwoth/NadekoBot/releases) and follow the comprehensive [GUIDE](https://github.com/Kwoth/NadekoBot/blob/master/ComprehensiveGuide.md)\r\n\r\nIn your bin/debug folder (or next to your exe if you are using release version), you must have a file called 'credentials.json' in which you will store all the necessary data to make the bot know who the owner is, and your api keys.\r\n\r\nWhen you clone the project, make sure to run `git submodule init` and `git submodule update` to get the correct discord.net version\r\n\r\n**This is how the credentials.json should look like:**\r\n```json\r\n{\r\n    \"Username\":\"bot_email\",\r\n    \"BotId\": 123123123123,\r\n    \"Password\":\"bot_password\",\r\n    \"GoogleAPIKey\":\"google_api_key\",\r\n    \"OwnerIds\":[123123123123, 123123123123],\r\n    \"TrelloAppKey\": \"your_trello_app_key (optional)\",\r\n    \"SoundCloudClientID\": \"your_soundcloud_key (optional)\",\r\n    \"MashapeKey\": \"your_mashape_key (optional)\",\r\n    \"LoLAPIKey\":\"your_champion.gg_apikey (optional)',\r\n}\r\n```\r\n##### You can omit:  \r\n- googleAPIKey if you don't want music  \r\n- TrelloAppKey if you don't need trello notifications\r\n- ForwardMessages if you don't want bot PM messages to be redirected to you\r\n```json\r\n{\r\n\t\"Username\":\"bot_email\",\r\n\t\"BotId\": 12312312312313,\r\n\t\"Password\":\"bot_password\",\r\n\t\"OwnerIds\":[123123123123, 1231231232],\r\n}\r\n```\r\n\r\nNext to your exe you must also have a data folder in which there is config.json (among other things) which will contain some user specific config, like should bot join servers, should pms to bot be forwarded to you and list of ids of blacklisted users, channels and servers.\r\n\r\n##### data/config.json example\r\n```json\r\n{\r\n  \"DontJoinServers\": false,\r\n  \"ForwardMessages\": true,\r\n  \"ServerBlacklist\": [],\r\n  \"ChannelBlacklist\": [],\r\n  \"UserBlacklist\": []\r\n}\r\n```\r\n- BotId and OwnerIds are **NOT** names of the owner and the bot. If you do not know the id of your bot, put 2 random numbers in those fields, run the bot and do `.uid @MyBotName` - that will give you your bot\\_id, do the same for yourself `.uid @MyName` and copy the numbers in their respective fields.\r\n- For google api key, you need to enable URL shortner, Youtube video search **and custom search** in the [dev console](https://console.developers.google.com/).\r\n- For the Soundcloud Api key you need a Soundcloud account. You need to create a new app on http://soundcloud.com/you/apps/new and after that go here http://soundcloud.com/you/apps click on the name of your created your app and copy the Client ID. Paste it into credentials.json.\r\n- For Mashape Api Key you need to create an account on their api marketplace here https://market.mashape.com/. After that you need to go to market.mashape.com/YOURNAMEHERE/applications/default-application and press GET THE KEYS in the right top corner copy paste it into your credentials.json and you are ready to race! \r\n- If you want to have music, you need to download FFMPEG from this link http://ffmpeg.zeranoe.com/builds/ (static build version) and add ffmpeg/bin folder to your PATH environment variable. You do that by opening explorer -> right click 'This PC' -> properties -> advanced system settings -> In the top part, there is a PATH field, add `;` to the end and then your ffmpeg install location /bin (for example ;C:\\ffmpeg-5.6.7\\bin) and save. Open command prompt and type ffmpeg to see if you added it correctly. If it says \"command not found\" then you made a mistake somewhere. There are a lot of guides on the internet on how to add stuff to your PATH, check them out if you are stuck.\r\n- **IF YOU HAVE BEEN USING THIS BOT BEFORE AND YOU HAVE DATA FROM PARSE THAT YOU WANT TO KEEP** you should export your parse data and extract it inside /data/parsedata in your bot's folder. Next time you start the bot, type `.parsetosql` and the bot will fill your local sqlite db with data from those .json files.\r\n\r\n**Nothing was buffered music error?** make sure to follow the guide on google api key and ffmpeg [here](https://www.youtube.com/watch?v=x7v02MXNLeI)\r\n  \r\nEnjoy\r\n\r\n##List of commands   \r\n\r\n[**click here for a list of commands**](https://github.com/Kwoth/NadekoBot/blob/master/commandlist.md)\r\n",
=======
  "name": "Nadekobot",
  "tagline": "General purpose discord chat bot written in C# using Discord.net library.",
  "body": "### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
>>>>>>> Kwoth/gh-pages
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}